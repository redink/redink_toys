{module, merge_sort}.  %% version = 0

{exports, [{merge_key_sort,2},
           {merge_key_sort2,2},
           {merge_sort,1},
           {merge_sort2,1},
           {module_info,0},
           {module_info,1}]}.

{attributes, []}.

{labels, 49}.


{function, merge_sort, 1, 2}.
  {label,1}.
    {line,[{location,"merge_sort.erl",8}]}.
    {func_info,{atom,merge_sort},{atom,merge_sort},1}.
  {label,2}.
    {test,is_nonempty_list,{f,3},[{x,0}]}.
    {get_list,{x,0},{x,1},{x,2}}.
    {test,is_nil,{f,4},[{x,2}]}.
    {test_heap,2,2}.
    {put_list,{x,1},nil,{x,0}}.
    return.
  {label,3}.
    {test,is_nil,{f,4},[{x,0}]}.
    return.
  {label,4}.
    {allocate_zero,1,1}.
    {line,[{location,"merge_sort.erl",13}]}.
    {gc_bif,length,{f,0},1,[{x,0}],{x,1}}.
    {line,[{location,"merge_sort.erl",13}]}.
    {fconv,{x,1},{fr,0}}.
    {fmove,{float,2.0},{fr,1}}.
    fclearerror.
    {bif,fdiv,{f,0},[{fr,0},{fr,1}],{fr,0}}.
    {line,[{location,"merge_sort.erl",13}]}.
    {test_heap,{alloc,[{words,0},{floats,1}]},2}.
    {fcheckerror,{f,0}}.
    {fmove,{fr,0},{x,1}}.
    {gc_bif,round,{f,0},2,[{x,1}],{x,2}}.
    {move,{x,0},{x,1}}.
    {move,{x,2},{x,0}}.
    {line,[{location,"merge_sort.erl",13}]}.
    {call_ext,2,{extfunc,lists,split,2}}.
    {test,is_tuple,{f,5},[{x,0}]}.
    {test,test_arity,{f,5},[{x,0},2]}.
    {get_tuple_element,{x,0},0,{x,1}}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{x,1},{x,0}}.
    {line,[{location,"merge_sort.erl",14}]}.
    {call,1,{f,2}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
    {line,[{location,"merge_sort.erl",14}]}.
    {call,1,{f,2}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {call_last,2,{f,22},1}.
  {label,5}.
    {line,[{location,"merge_sort.erl",13}]}.
    {badmatch,{x,0}}.


{function, merge_sort2, 1, 7}.
  {label,6}.
    {line,[{location,"merge_sort.erl",18}]}.
    {func_info,{atom,merge_sort},{atom,merge_sort2},1}.
  {label,7}.
    {test,is_nonempty_list,{f,8},[{x,0}]}.
    {get_list,{x,0},{x,1},{x,2}}.
    {test,is_nil,{f,9},[{x,2}]}.
    {test_heap,2,2}.
    {put_list,{x,1},nil,{x,0}}.
    return.
  {label,8}.
    {test,is_nil,{f,9},[{x,0}]}.
    return.
  {label,9}.
    {allocate_zero,1,1}.
    {line,[{location,"merge_sort.erl",23}]}.
    {gc_bif,length,{f,0},1,[{x,0}],{x,1}}.
    {line,[{location,"merge_sort.erl",23}]}.
    {fconv,{x,1},{fr,0}}.
    {fmove,{float,2.0},{fr,1}}.
    fclearerror.
    {bif,fdiv,{f,0},[{fr,0},{fr,1}],{fr,0}}.
    {line,[{location,"merge_sort.erl",23}]}.
    {test_heap,{alloc,[{words,0},{floats,1}]},2}.
    {fcheckerror,{f,0}}.
    {fmove,{fr,0},{x,1}}.
    {gc_bif,round,{f,0},2,[{x,1}],{x,2}}.
    {move,{x,0},{x,1}}.
    {move,{x,2},{x,0}}.
    {line,[{location,"merge_sort.erl",23}]}.
    {call_ext,2,{extfunc,lists,split,2}}.
    {test,is_tuple,{f,10},[{x,0}]}.
    {test,test_arity,{f,10},[{x,0},2]}.
    {get_tuple_element,{x,0},0,{x,1}}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{x,1},{x,0}}.
    {line,[{location,"merge_sort.erl",24}]}.
    {call,1,{f,7}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
    {line,[{location,"merge_sort.erl",24}]}.
    {call,1,{f,7}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {call_last,2,{f,32},1}.
  {label,10}.
    {line,[{location,"merge_sort.erl",23}]}.
    {badmatch,{x,0}}.


{function, merge_key_sort, 2, 12}.
  {label,11}.
    {line,[{location,"merge_sort.erl",28}]}.
    {func_info,{atom,merge_sort},{atom,merge_key_sort},2}.
  {label,12}.
    {test,is_nonempty_list,{f,13},[{x,0}]}.
    {get_list,{x,0},{x,2},{x,3}}.
    {test,is_nil,{f,14},[{x,3}]}.
    {test_heap,2,3}.
    {put_list,{x,2},nil,{x,0}}.
    return.
  {label,13}.
    {test,is_nil,{f,14},[{x,0}]}.
    return.
  {label,14}.
    {allocate_zero,2,2}.
    {line,[{location,"merge_sort.erl",33}]}.
    {gc_bif,length,{f,0},2,[{x,0}],{x,2}}.
    {line,[{location,"merge_sort.erl",33}]}.
    {fconv,{x,2},{fr,0}}.
    {fmove,{float,2.0},{fr,1}}.
    fclearerror.
    {bif,fdiv,{f,0},[{fr,0},{fr,1}],{fr,0}}.
    {line,[{location,"merge_sort.erl",33}]}.
    {test_heap,{alloc,[{words,0},{floats,1}]},3}.
    {fcheckerror,{f,0}}.
    {fmove,{fr,0},{x,2}}.
    {gc_bif,round,{f,0},3,[{x,2}],{x,2}}.
    {move,{x,1},{y,1}}.
    {move,{x,0},{x,1}}.
    {move,{x,2},{x,0}}.
    {line,[{location,"merge_sort.erl",33}]}.
    {call_ext,2,{extfunc,lists,split,2}}.
    {test,is_tuple,{f,15},[{x,0}]}.
    {test,test_arity,{f,15},[{x,0},2]}.
    {get_tuple_element,{x,0},0,{x,1}}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{x,1},{x,0}}.
    {move,{y,1},{x,1}}.
    {line,[{location,"merge_sort.erl",34}]}.
    {call,2,{f,12}}.
    {move,{x,0},{x,2}}.
    {move,{y,1},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,2},{y,0}}.
    {line,[{location,"merge_sort.erl",35}]}.
    {call,2,{f,12}}.
    {move,{x,0},{x,1}}.
    {move,{y,1},{x,2}}.
    {move,{y,0},{x,0}}.
    {call_last,3,{f,27},2}.
  {label,15}.
    {line,[{location,"merge_sort.erl",33}]}.
    {badmatch,{x,0}}.


{function, merge_key_sort2, 2, 17}.
  {label,16}.
    {line,[{location,"merge_sort.erl",40}]}.
    {func_info,{atom,merge_sort},{atom,merge_key_sort2},2}.
  {label,17}.
    {test,is_nonempty_list,{f,18},[{x,0}]}.
    {get_list,{x,0},{x,2},{x,3}}.
    {test,is_nil,{f,19},[{x,3}]}.
    {test_heap,2,3}.
    {put_list,{x,2},nil,{x,0}}.
    return.
  {label,18}.
    {test,is_nil,{f,19},[{x,0}]}.
    return.
  {label,19}.
    {allocate_zero,2,2}.
    {line,[{location,"merge_sort.erl",45}]}.
    {gc_bif,length,{f,0},2,[{x,0}],{x,2}}.
    {line,[{location,"merge_sort.erl",45}]}.
    {fconv,{x,2},{fr,0}}.
    {fmove,{float,2.0},{fr,1}}.
    fclearerror.
    {bif,fdiv,{f,0},[{fr,0},{fr,1}],{fr,0}}.
    {line,[{location,"merge_sort.erl",45}]}.
    {test_heap,{alloc,[{words,0},{floats,1}]},3}.
    {fcheckerror,{f,0}}.
    {fmove,{fr,0},{x,2}}.
    {gc_bif,round,{f,0},3,[{x,2}],{x,2}}.
    {move,{x,1},{y,1}}.
    {move,{x,0},{x,1}}.
    {move,{x,2},{x,0}}.
    {line,[{location,"merge_sort.erl",45}]}.
    {call_ext,2,{extfunc,lists,split,2}}.
    {test,is_tuple,{f,20},[{x,0}]}.
    {test,test_arity,{f,20},[{x,0},2]}.
    {get_tuple_element,{x,0},0,{x,1}}.
    {get_tuple_element,{x,0},1,{y,0}}.
    {move,{x,1},{x,0}}.
    {move,{y,1},{x,1}}.
    {line,[{location,"merge_sort.erl",46}]}.
    {call,2,{f,17}}.
    {move,{x,0},{x,2}}.
    {move,{y,1},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,2},{y,0}}.
    {line,[{location,"merge_sort.erl",47}]}.
    {call,2,{f,17}}.
    {move,{x,0},{x,1}}.
    {move,{y,1},{x,2}}.
    {move,{y,0},{x,0}}.
    {call_last,3,{f,39},2}.
  {label,20}.
    {line,[{location,"merge_sort.erl",45}]}.
    {badmatch,{x,0}}.


{function, lists_merge, 2, 22}.
  {label,21}.
    {line,[{location,"merge_sort.erl",59}]}.
    {func_info,{atom,merge_sort},{atom,lists_merge},2}.
  {label,22}.
    {test,is_nil,{f,23},[{x,0}]}.
    {move,{x,1},{x,0}}.
    return.
  {label,23}.
    {test,is_nil,{f,24},[{x,1}]}.
    return.
  {label,24}.
    {test,is_nonempty_list,{f,25},[{x,0}]}.
    {get_list,{x,0},{x,2},{x,3}}.
    {test,is_nonempty_list,{f,21},[{x,1}]}.
    {get_list,{x,1},{x,4},{x,5}}.
    {test,is_ge,{f,25},[{x,4},{x,2}]}.
    {allocate,1,4}.
    {move,{x,3},{x,0}}.
    {move,{x,2},{y,0}}.
    {line,[{location,"merge_sort.erl",64}]}.
    {call,2,{f,22}}.
    {test_heap,2,1}.
    {put_list,{y,0},{x,0},{x,0}}.
    {deallocate,1}.
    return.
  {label,25}.
    {test,is_nonempty_list,{f,21},[{x,1}]}.
    {allocate,1,2}.
    {get_list,{x,1},{y,0},{x,1}}.
    {line,[{location,"merge_sort.erl",66}]}.
    {call,2,{f,22}}.
    {test_heap,2,1}.
    {put_list,{y,0},{x,0},{x,0}}.
    {deallocate,1}.
    return.


{function, lists_key_merge, 3, 27}.
  {label,26}.
    {line,[{location,"merge_sort.erl",68}]}.
    {func_info,{atom,merge_sort},{atom,lists_key_merge},3}.
  {label,27}.
    {test,is_nil,{f,28},[{x,0}]}.
    {move,{x,1},{x,0}}.
    return.
  {label,28}.
    {test,is_nil,{f,29},[{x,1}]}.
    return.
  {label,29}.
    {test,is_nonempty_list,{f,26},[{x,0}]}.
    {get_list,{x,0},{x,3},{x,4}}.
    {test,is_nonempty_list,{f,26},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,6}}.
    {bif,element,{f,30},[{x,2},{x,3}],{x,7}}.
    {bif,element,{f,30},[{x,2},{x,5}],{x,8}}.
    {test,is_ge,{f,30},[{x,8},{x,7}]}.
    {allocate,1,5}.
    {move,{x,4},{x,0}}.
    {move,{x,3},{y,0}}.
    {line,[{location,"merge_sort.erl",74}]}.
    {call,3,{f,27}}.
    {test_heap,2,1}.
    {put_list,{y,0},{x,0},{x,0}}.
    {deallocate,1}.
    return.
  {label,30}.
    {bif,element,{f,26},[{x,2},{x,3}],{x,7}}.
    {bif,element,{f,26},[{x,2},{x,5}],{x,8}}.
    {test,is_lt,{f,26},[{x,8},{x,7}]}.
    {allocate,1,7}.
    {move,{x,6},{x,1}}.
    {move,{x,5},{y,0}}.
    {line,[{location,"merge_sort.erl",77}]}.
    {call,3,{f,27}}.
    {test_heap,2,1}.
    {put_list,{y,0},{x,0},{x,0}}.
    {deallocate,1}.
    return.


{function, lists_merge2, 2, 32}.
  {label,31}.
    {line,[{location,"merge_sort.erl",88}]}.
    {func_info,{atom,merge_sort},{atom,lists_merge2},2}.
  {label,32}.
    {allocate,1,2}.
    {move,{x,1},{y,0}}.
    {line,[{location,"merge_sort.erl",89}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
    {line,[{location,"merge_sort.erl",89}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{x,0},{x,1}}.
    {move,nil,{x,2}}.
    {move,{y,0},{x,0}}.
    {call_last,3,{f,34},1}.


{function, lists_merge_do, 3, 34}.
  {label,33}.
    {line,[{location,"merge_sort.erl",90}]}.
    {func_info,{atom,merge_sort},{atom,lists_merge_do},3}.
  {label,34}.
    {test,is_nil,{f,35},[{x,0}]}.
    {allocate,1,3}.
    {move,{x,1},{x,0}}.
    {move,{x,2},{y,0}}.
    {line,[{location,"merge_sort.erl",91}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{y,0},{x,1}}.
    {line,[{location,"merge_sort.erl",91}]}.
    {call_ext_last,2,{extfunc,erlang,'++',2},1}.
  {label,35}.
    {test,is_nil,{f,36},[{x,1}]}.
    {allocate,1,3}.
    {move,{x,2},{y,0}}.
    {line,[{location,"merge_sort.erl",93}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{y,0},{x,1}}.
    {line,[{location,"merge_sort.erl",93}]}.
    {call_ext_last,2,{extfunc,erlang,'++',2},1}.
  {label,36}.
    {test,is_nonempty_list,{f,37},[{x,0}]}.
    {get_list,{x,0},{x,3},{x,4}}.
    {test,is_nonempty_list,{f,33},[{x,1}]}.
    {get_list,{x,1},{x,5},{x,6}}.
    {test,is_ge,{f,37},[{x,3},{x,5}]}.
    {test_heap,2,5}.
    {put_list,{x,3},{x,2},{x,2}}.
    {move,{x,4},{x,0}}.
    {call_only,3,{f,34}}.
  {label,37}.
    {test,is_nonempty_list,{f,33},[{x,1}]}.
    {test_heap,2,3}.
    {get_list,{x,1},{x,3},{x,1}}.
    {put_list,{x,3},{x,2},{x,2}}.
    {call_only,3,{f,34}}.


{function, lists_key_merge2, 3, 39}.
  {label,38}.
    {line,[{location,"merge_sort.erl",99}]}.
    {func_info,{atom,merge_sort},{atom,lists_key_merge2},3}.
  {label,39}.
    {allocate,2,3}.
    {move,{x,1},{y,0}}.
    {move,{x,2},{y,1}}.
    {line,[{location,"merge_sort.erl",100}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
    {line,[{location,"merge_sort.erl",100}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{y,1},{x,2}}.
    {move,{x,0},{x,1}}.
    {move,nil,{x,3}}.
    {move,{y,0},{x,0}}.
    {call_last,4,{f,41},2}.


{function, lists_key_merge2, 4, 41}.
  {label,40}.
    {line,[{location,"merge_sort.erl",101}]}.
    {func_info,{atom,merge_sort},{atom,lists_key_merge2},4}.
  {label,41}.
    {test,is_nil,{f,42},[{x,0}]}.
    {allocate,1,4}.
    {move,{x,1},{x,0}}.
    {move,{x,3},{y,0}}.
    {line,[{location,"merge_sort.erl",102}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{y,0},{x,1}}.
    {line,[{location,"merge_sort.erl",102}]}.
    {call_ext_last,2,{extfunc,erlang,'++',2},1}.
  {label,42}.
    {test,is_nil,{f,43},[{x,1}]}.
    {allocate,1,4}.
    {move,{x,3},{y,0}}.
    {line,[{location,"merge_sort.erl",104}]}.
    {call_ext,1,{extfunc,lists,reverse,1}}.
    {move,{y,0},{x,1}}.
    {line,[{location,"merge_sort.erl",104}]}.
    {call_ext_last,2,{extfunc,erlang,'++',2},1}.
  {label,43}.
    {test,is_nonempty_list,{f,40},[{x,0}]}.
    {get_list,{x,0},{x,4},{x,5}}.
    {test,is_nonempty_list,{f,40},[{x,1}]}.
    {get_list,{x,1},{x,6},{x,7}}.
    {bif,element,{f,44},[{x,2},{x,4}],{x,8}}.
    {bif,element,{f,44},[{x,2},{x,6}],{x,9}}.
    {test,is_ge,{f,44},[{x,8},{x,9}]}.
    {test_heap,2,6}.
    {put_list,{x,4},{x,3},{x,3}}.
    {move,{x,5},{x,0}}.
    {call_only,4,{f,41}}.
  {label,44}.
    {bif,element,{f,40},[{x,2},{x,4}],{x,8}}.
    {bif,element,{f,40},[{x,2},{x,6}],{x,9}}.
    {test,is_lt,{f,40},[{x,8},{x,9}]}.
    {test_heap,2,8}.
    {put_list,{x,6},{x,3},{x,3}}.
    {move,{x,7},{x,1}}.
    {call_only,4,{f,41}}.


{function, module_info, 0, 46}.
  {label,45}.
    {line,[]}.
    {func_info,{atom,merge_sort},{atom,module_info},0}.
  {label,46}.
    {move,{atom,merge_sort},{x,0}}.
    {line,[]}.
    {call_ext_only,1,{extfunc,erlang,get_module_info,1}}.


{function, module_info, 1, 48}.
  {label,47}.
    {line,[]}.
    {func_info,{atom,merge_sort},{atom,module_info},1}.
  {label,48}.
    {move,{x,0},{x,1}}.
    {move,{atom,merge_sort},{x,0}}.
    {line,[]}.
    {call_ext_only,2,{extfunc,erlang,get_module_info,2}}.
